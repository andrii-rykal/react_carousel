{"version":3,"sources":["components/Carousel/Carousel.tsx","components/Form/Form.tsx","App.tsx","index.tsx"],"names":["lengthMove","Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","moveSlider","event","list","document","querySelector","currentButton","target","buttonNext","buttonPrev","totalWidth","length","totalFrameSize","totalStep","HTMLElement","dataset","cy","Math","abs","style","transform","disabled","className","width","transition","map","image","index","src","alt","height","type","onClick","Form","members","pace","enteredStep","frame","enteredFrame","size","enteredSize","speed","enteredSpeed","setInfinite","onChangeValue","enteredFunction","currentValue","startValue","value","min","max","onChange","name","App","useState","stepSize","setStepSize","frameVisible","setFrameVisible","itemSize","setItemSize","speedValue","setSpeedValue","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.08fc7907.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\nlet lengthMove = 0;\n\ntype Props = {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n};\n\nexport const Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinite,\n}) => {\n  const moveSlider = (event: React.MouseEvent<HTMLElement>) => {\n    const list = document.querySelector('.Carousel__list');\n    const currentButton = event.target;\n    const buttonNext = document\n      .querySelector<HTMLButtonElement>('[data-cy=next]');\n    const buttonPrev = document\n      .querySelector<HTMLButtonElement>('[data-cy=prev]');\n    const totalWidth = images.length * itemWidth;\n    const totalFrameSize = frameSize * itemWidth;\n    const totalStep = step * itemWidth;\n\n    if (currentButton instanceof HTMLElement\n      && list instanceof HTMLElement\n      && buttonNext instanceof HTMLElement\n      && buttonPrev instanceof HTMLElement) {\n      switch (currentButton.dataset.cy) {\n        case 'next':\n\n          if (infinite\n            && Math.abs(lengthMove) === totalWidth - totalFrameSize) {\n            lengthMove = 0;\n            list.style.transform = `translateX(${lengthMove}px)`;\n            break;\n          } else if (!infinite\n            && Math.abs(lengthMove) === totalWidth - totalFrameSize) {\n            buttonNext.disabled = true;\n            break;\n          }\n\n          lengthMove -= totalStep;\n\n          if (Math.abs(lengthMove) > totalWidth - totalFrameSize) {\n            lengthMove = -1 * (totalWidth - totalFrameSize);\n            buttonPrev.disabled = false;\n            list.style.transform = `translateX(${lengthMove}px)`;\n          } else {\n            buttonPrev.disabled = false;\n            list.style.transform = `translateX(${lengthMove}px)`;\n          }\n\n          break;\n\n        case 'prev':\n          if (infinite && lengthMove === 0) {\n            lengthMove = -1 * (totalWidth - totalFrameSize);\n            list.style.transform = `translateX(${lengthMove}px)`;\n            break;\n          } else if (!infinite && lengthMove === 0) {\n            buttonPrev.disabled = true;\n            break;\n          }\n\n          lengthMove += totalStep;\n\n          if (lengthMove > 0) {\n            lengthMove = 0;\n            buttonNext.disabled = false;\n            list.style.transform = `translateX(${lengthMove}px)`;\n          } else {\n            buttonNext.disabled = false;\n            list.style.transform = `translateX(${lengthMove}px)`;\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    }\n  };\n\n  return (\n    <div\n      className=\"Carousel\"\n      style={{\n        width: `${images.length * itemWidth}px`,\n      }}\n    >\n\n      <div\n        className=\"container\"\n        style={{\n          width: `${frameSize * itemWidth}px`,\n        }}\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={{\n            transition: `all ${animationDuration}ms`,\n          }}\n        >\n          {images.map((image, index) => (\n            <li key={image}>\n              <img\n                src={image}\n                alt={`${index + 1}`}\n                style={{\n                  width: `${itemWidth}px`,\n                  height: `${itemWidth}px`,\n                }}\n              />\n            </li>\n          ))}\n        </ul>\n\n        <div className=\"Carousel__buttons\">\n          <button\n            type=\"button\"\n            data-cy=\"prev\"\n            onClick={moveSlider}\n          >\n            Prev\n          </button>\n\n          <button\n            type=\"button\"\n            data-cy=\"next\"\n            onClick={moveSlider}\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './Form.scss';\n\ntype Props = {\n  members: number;\n  pace: number;\n  enteredStep: (pace: number) => void;\n  frame: number;\n  enteredFrame: (frame: number) => void;\n  size: number;\n  enteredSize: (size: number) => void;\n  speed: number;\n  enteredSpeed: (speed: number) => void;\n  infinite: boolean;\n  setInfinite: (infinite: boolean) => void;\n};\n\nexport const Form: React.FC<Props> = ({\n  members,\n  pace,\n  enteredStep,\n  frame,\n  enteredFrame,\n  size,\n  enteredSize,\n  speed,\n  enteredSpeed,\n  infinite,\n  setInfinite,\n}) => {\n  const onChangeValue = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    enteredFunction: (value: number) => void,\n    currentValue: number,\n    startValue: number,\n  ) => {\n    if (+event.target.value && +event.target.value !== currentValue) {\n      enteredFunction(+event.target.value);\n    } else {\n      enteredFunction(startValue);\n    }\n  };\n\n  return (\n    <form className=\"form\">\n      <label>\n        Step:\n        <input\n          type=\"number\"\n          value={pace}\n          min={1}\n          max={members}\n          onChange={(event) => onChangeValue(event, enteredStep, pace, 3)}\n        />\n      </label>\n      <label>\n        Frame:\n        <input\n          type=\"number\"\n          value={frame}\n          min={1}\n          max={members}\n          onChange={(event) => onChangeValue(event, enteredFrame, frame, 3)}\n        />\n      </label>\n      <label>\n        Size:\n        <input\n          type=\"number\"\n          name=\"size\"\n          value={size}\n          min={50}\n          max={300}\n          onChange={(event) => onChangeValue(event, enteredSize, size, 130)}\n        />\n      </label>\n      <label>\n        Speed:\n        <input\n          type=\"number\"\n          value={speed}\n          min={0}\n          max={5000}\n          onChange={(event) => onChangeValue(event, enteredSpeed, speed, 1000)}\n        />\n      </label>\n      <label>\n        Infinite:\n        <input\n          type=\"checkbox\"\n          onChange={() => {\n            setInfinite(!infinite);\n          }}\n        />\n      </label>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\nimport { Form } from './components/Form';\n\nconst images: string[] = [\n  './img/1.png',\n  './img/2.png',\n  './img/3.png',\n  './img/4.png',\n  './img/5.png',\n  './img/6.png',\n  './img/7.png',\n  './img/8.png',\n  './img/9.png',\n  './img/10.png',\n];\n\nexport const App: React.FC = () => {\n  const [stepSize, setStepSize] = useState(3);\n  const [frameVisible, setFrameVisible] = useState(3);\n  const [itemSize, setItemSize] = useState(130);\n  const [speedValue, setSpeedValue] = useState(1000);\n  const [infinite, setInfinite] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <h1 data-cy=\"title\">\n        {`Carousel with ${images.length} images`}\n      </h1>\n\n      <Form\n        members={images.length}\n        pace={stepSize}\n        enteredStep={setStepSize}\n        frame={frameVisible}\n        enteredFrame={setFrameVisible}\n        size={itemSize}\n        enteredSize={setItemSize}\n        speed={speedValue}\n        enteredSpeed={setSpeedValue}\n        infinite={infinite}\n        setInfinite={setInfinite}\n      />\n\n      <Carousel\n        images={images}\n        step={stepSize}\n        frameSize={frameVisible}\n        itemWidth={itemSize}\n        animationDuration={speedValue}\n        infinite={infinite}\n      />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}