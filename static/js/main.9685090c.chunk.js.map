{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","lengthMove","moveSlider","event","list","document","querySelector","currentButton","target","buttonNext","buttonPrev","totalWidth","length","totalFrameSize","totalStep","HTMLElement","dataset","cy","Math","abs","style","transform","disabled","className","width","transition","map","image","index","src","alt","height","type","onClick","App","state","this","React","Component","ReactDOM","render","getElementById"],"mappings":"uPA+IeA,EAnImB,SAAC,GAO5B,IANLC,EAMI,EANJA,OAMI,IALJC,YAKI,MALG,EAKH,MAJJC,iBAII,MAJQ,EAIR,MAHJC,iBAGI,MAHQ,IAGR,MAFJC,yBAEI,MAFgB,IAEhB,MADJC,gBACI,SACAC,EAAa,EACXC,EAAa,SAACC,GAClB,IAAMC,EAAOC,SAASC,cAAc,mBAC9BC,EAAgBJ,EAAMK,OACtBC,EAAaJ,SAChBC,cAAiC,kBAC9BI,EAAaL,SAChBC,cAAiC,kBAC9BK,EAAahB,EAAOiB,OAASd,EAC7Be,EAAiBhB,EAAYC,EAC7BgB,EAAYhB,EAAYF,EAE9B,GAAIW,aAAyBQ,aACxBX,aAAgBW,aAChBN,aAAsBM,aACtBL,aAAsBK,YACzB,OAAQR,EAAcS,QAAQC,IAC5B,IAAK,OAEH,GAAIjB,GACCkB,KAAKC,IAAIlB,KAAgBU,EAAaE,EAAgB,CACzDZ,EAAa,EACbG,EAAKgB,MAAMC,UAAX,qBAAqCpB,EAArC,OACA,MACUD,GACPkB,KAAKC,IAAIlB,KAAgBU,EAAaE,IACzCJ,EAAWa,UAAW,GAGxBrB,GAAca,EAEVI,KAAKC,IAAIlB,GAAca,EAAYH,GACrCV,GAAc,GAAKU,EAAaE,GAChCT,EAAKgB,MAAMC,UAAX,qBAAqCpB,EAArC,SAEAS,EAAWY,UAAW,EACtBlB,EAAKgB,MAAMC,UAAX,qBAAqCpB,EAArC,QAGF,MAEF,IAAK,OACH,GAAID,GAA2B,IAAfC,EAAkB,CAChCA,GAAc,GAAKU,EAAaE,GAChCT,EAAKgB,MAAMC,UAAX,qBAAqCpB,EAArC,OACA,MACUD,GAA2B,IAAfC,IACtBS,EAAWY,UAAW,IAGxBrB,GAAca,GAEG,GACfb,EAAa,EACbG,EAAKgB,MAAMC,UAAX,qBAAqCpB,EAArC,SAEAQ,EAAWa,UAAW,EACtBlB,EAAKgB,MAAMC,UAAX,qBAAqCpB,EAArC,UAWV,OACE,qBACEsB,UAAU,WACVH,MAAO,CACLI,MAAM,GAAD,OAAK7B,EAAOiB,OAASd,EAArB,OAHT,SAME,sBACEyB,UAAU,YACVH,MAAO,CACLI,MAAM,GAAD,OAAK3B,EAAYC,EAAjB,OAHT,UAME,oBACEyB,UAAU,iBACVH,MAAO,CACLK,WAAW,OAAD,OAAS1B,EAAT,OAHd,SAMGJ,EAAO+B,KAAI,SAACC,EAAOC,GAAR,OACV,6BACE,qBACEC,IAAKF,EACLG,IAAG,UAAKF,EAAQ,GAChBR,MAAO,CACLI,MAAM,GAAD,OAAK1B,EAAL,MACLiC,OAAO,GAAD,OAAKjC,EAAL,UANH6B,QAab,sBAAKJ,UAAU,oBAAf,UACE,wBACES,KAAK,SACL,UAAQ,OACRC,QAAS/B,EAHX,kBAQA,wBACE8B,KAAK,SACL,UAAQ,OACRC,QAAS/B,EAHX,2BC1HJgC,E,4MACJC,MAAQ,CACNxC,OAAQ,CACN,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,iB,4CAIJ,WACE,IAAQA,EAAWyC,KAAKD,MAAhBxC,OAER,OACE,sBAAK4B,UAAU,MAAf,UACE,oBAAI,UAAQ,QAAZ,iCACoB5B,EAAOiB,OAD3B,aAIA,cAAC,EAAD,CACEjB,OAAQA,EACRC,KAAM,EACNC,UAAW,EACXC,UAAW,IACXC,kBAAmB,IACnBC,UAAU,W,GA/BFqC,IAAMC,WAsCTJ,IC3CfK,IAASC,OAAO,cAAC,EAAD,IAASnC,SAASoC,eAAe,W","file":"static/js/main.9685090c.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n};\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  step = 3,\n  frameSize = 3,\n  itemWidth = 130,\n  animationDuration = 1000,\n  infinite = false,\n}) => {\n  let lengthMove = 0;\n  const moveSlider = (event: React.MouseEvent<HTMLElement>) => {\n    const list = document.querySelector('.Carousel__list');\n    const currentButton = event.target;\n    const buttonNext = document\n      .querySelector<HTMLButtonElement>('[data-cy=next]');\n    const buttonPrev = document\n      .querySelector<HTMLButtonElement>('[data-cy=prev]');\n    const totalWidth = images.length * itemWidth;\n    const totalFrameSize = frameSize * itemWidth;\n    const totalStep = itemWidth * step;\n\n    if (currentButton instanceof HTMLElement\n      && list instanceof HTMLElement\n      && buttonNext instanceof HTMLElement\n      && buttonPrev instanceof HTMLElement) {\n      switch (currentButton.dataset.cy) {\n        case 'next':\n\n          if (infinite\n            && Math.abs(lengthMove) === totalWidth - totalFrameSize) {\n            lengthMove = 0;\n            list.style.transform = `translateX(${lengthMove}px)`;\n            break;\n          } else if (!infinite\n            && Math.abs(lengthMove) === totalWidth - totalFrameSize) {\n            buttonNext.disabled = true;\n          }\n\n          lengthMove -= totalStep;\n\n          if (Math.abs(lengthMove) + totalStep > totalWidth) {\n            lengthMove = -1 * (totalWidth - totalFrameSize);\n            list.style.transform = `translateX(${lengthMove}px)`;\n          } else {\n            buttonPrev.disabled = false;\n            list.style.transform = `translateX(${lengthMove}px)`;\n          }\n\n          break;\n\n        case 'prev':\n          if (infinite && lengthMove === 0) {\n            lengthMove = -1 * (totalWidth - totalFrameSize);\n            list.style.transform = `translateX(${lengthMove}px)`;\n            break;\n          } else if (!infinite && lengthMove === 0) {\n            buttonPrev.disabled = true;\n          }\n\n          lengthMove += totalStep;\n\n          if (lengthMove > 0) {\n            lengthMove = 0;\n            list.style.transform = `translateX(${lengthMove}px)`;\n          } else {\n            buttonNext.disabled = false;\n            list.style.transform = `translateX(${lengthMove}px)`;\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    }\n  };\n\n  return (\n    <div\n      className=\"Carousel\"\n      style={{\n        width: `${images.length * itemWidth}px`,\n      }}\n    >\n      <div\n        className=\"container\"\n        style={{\n          width: `${frameSize * itemWidth}px`,\n        }}\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={{\n            transition: `all ${animationDuration}ms`,\n          }}\n        >\n          {images.map((image, index) => (\n            <li key={image}>\n              <img\n                src={image}\n                alt={`${index + 1}`}\n                style={{\n                  width: `${itemWidth}px`,\n                  height: `${itemWidth}px`,\n                }}\n              />\n            </li>\n          ))}\n        </ul>\n\n        <div className=\"Carousel__buttons\">\n          <button\n            type=\"button\"\n            data-cy=\"prev\"\n            onClick={moveSlider}\n          >\n            Prev\n          </button>\n\n          <button\n            type=\"button\"\n            data-cy=\"next\"\n            onClick={moveSlider}\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n  };\n\n  render() {\n    const { images } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 data-cy=\"title\">\n          {`Carousel with ${images.length} images`}\n        </h1>\n\n        <Carousel\n          images={images}\n          step={3}\n          frameSize={3}\n          itemWidth={130}\n          animationDuration={1000}\n          infinite={false}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}